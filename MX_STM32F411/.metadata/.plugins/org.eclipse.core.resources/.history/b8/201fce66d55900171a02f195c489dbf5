/*! ----------------------------------------------------------------------------
 * @file	port.c
 * @brief	HW specific definitions and functions for portability
 *
 * @attention
 *
 * Copyright 2013 (c) DecaWave Ltd, Dublin, Ireland.
 *
 * All rights reserved.
 *
 * @author DecaWave
 */
#include "port.h"
#include "deca_device_api.h"

void deca_sleep(unsigned int time_ms)
{
    /* This assumes that the tick has a period of exactly one millisecond. See CLOCKS_PER_SEC define. */
    unsigned long end = HAL_GetTick() + time_ms;
    while ((signed long)(HAL_GetTick() - end) <= 0)
        ;
}
void sleep_ms(unsigned int time_ms)
{
	HAL_Delay(time_ms);
}

// ***********************
// Funcion para enviar una cadena de caracteres por el UART 2

// ***********************
// Funcion para enviar un caracter por el UART 2
void UART_Sendchar(uint8_t c)
{
	uint8_t ch = c;
    HAL_UART_Transmit(&huart2, &ch, 1, 1000);
}

void UART_PrintString(char *pcString)
{
	int i = 0;
	// loop through until reach string's zero terminator
	while (pcString[i] != 0) {
		UART_Sendchar(pcString[i]); // print each character
		i++;
	}
}

void UART_printBytes(uint8_t* buf, uint32_t len) {
    // transfer all bytes to HW Tx FIFO
    while ( len != 0 ) {
        // send next byte
    	UART_Sendchar(*buf);

        // update the buf ptr and length
        buf++;
        len--;
    }
}
void UART_printUint32(uint32_t n, uint8_t base) {
    uint32_t i = 0;
    uint8_t buf[8 * sizeof(uint32_t)]; // binary is the largest

    // check for zero case, print and bail out if so
    if (n == 0) {
    	UART_Sendchar((uint8_t)'0');
        return;
    }

    while (n > 0) {
        buf[i] = n % base;
        i++;
        n /= base;
    }

    for (; i > 0; i--) {
        if (buf[i - 1] < 10)
        	UART_Sendchar((uint8_t)('0' + buf[i - 1]));
        else
        	UART_Sendchar((uint8_t)('A' + buf[i - 1] - 10));
    }
}
void UART_printUint64(uint64_t n, uint8_t base) {
    uint64_t i = 0;
    uint8_t buf[8 * sizeof(uint64_t)]; // binary is the largest

    // check for zero case, print and bail out if so
    if (n == 0) {
    	UART_Sendchar((uint8_t)'0');
        return;
    }

    while (n > 0) {
        buf[i] = n % base;
        i++;
        n /= base;
    }

    for (; i > 0; i--) {
        if (buf[i - 1] < 10)
        	UART_Sendchar((uint8_t)('0' + buf[i - 1]));
        else
        	UART_Sendchar((uint8_t)('A' + buf[i - 1] - 10));
    }
}
void UART_printInt32(int32_t n, uint8_t base) {
    uint32_t i = 0;

    // print '-' for negative numbers, also negate
    if (n < 0) {
    	UART_Sendchar((uint8_t)'-');
        n = ((~n) + 1);
    }

    // cast to unsigned and print using uint32_t printer
    i = n;
    UART_printUint32(i, base);
}

void UART_printDouble(double n, uint8_t frac_digits) {
    uint8_t i;
    uint32_t i32;
    double rounding, remainder;

    // test for negatives
    if (n < 0.0) {
    	UART_Sendchar((uint8_t)'-');
        n = -n;
    }

    // round correctly so that print(1.999, 2) prints as "2.00"
    rounding = 0.5;
    for (i=0; i<frac_digits; i++)
        rounding /= 10.0;
    n += rounding;

    // extract the integer part of the number and print it
    i32 = (uint32_t)n;
    remainder = n - (double)i32;
    UART_printUint32(i32, 10);

    // print the decimal point, but only if there are digits beyond
    if (frac_digits > 0)
    	UART_Sendchar((uint8_t)'.');

    // extract digits from the remainder one at a time
    while (frac_digits-- > 0) {
        remainder *= 10.0;
        i32 = (uint32_t)remainder;
        UART_printUint32(i32, 10);
        remainder -= i32;
    }
}

//int NVIC_DisableDECAIRQ(void)
//{
//	EXTI_InitTypeDef EXTI_InitStructure;
//
//	/* Configure EXTI line */
//	EXTI_InitStructure.EXTI_Line = DECAIRQ_EXTI;
//	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
//	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;	//MPW3 IRQ polarity is high by default
//	EXTI_InitStructure.EXTI_LineCmd = DECAIRQ_EXTI_NOIRQ;
//	EXTI_Init(&EXTI_InitStructure);
//
//	return 0;
//}


//int NVIC_Configuration(void)
//{
//	GPIO_InitTypeDef GPIO_InitStructure;
//	EXTI_InitTypeDef EXTI_InitStructure;
//	NVIC_InitTypeDef NVIC_InitStructure;
//
//	// Enable GPIO used as DECA IRQ for interrupt
//	GPIO_InitStructure.GPIO_Pin = DECAIRQ;
//	GPIO_InitStructure.GPIO_Mode = 	GPIO_Mode_IPD;	//IRQ pin should be Pull Down to prevent unnecessary EXT IRQ while DW1000 goes to sleep mode
//	GPIO_Init(DECAIRQ_GPIO, &GPIO_InitStructure);
//
//	/* Connect EXTI Line to GPIO Pin */
//	GPIO_EXTILineConfig(DECAIRQ_EXTI_PORT, DECAIRQ_EXTI_PIN);
//
//	/* Configure EXTI line */
//	EXTI_InitStructure.EXTI_Line = DECAIRQ_EXTI;
//	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
//	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;	//MPW3 IRQ polarity is high by default
//	EXTI_InitStructure.EXTI_LineCmd = DECAIRQ_EXTI_USEIRQ;
//	EXTI_Init(&EXTI_InitStructure);
//
//	/* Set NVIC Grouping to 16 groups of interrupt without sub-grouping */
//	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
//
//	/* Enable and set EXTI Interrupt to the lowest priority */
//	NVIC_InitStructure.NVIC_IRQChannel = DECAIRQ_EXTI_IRQn;
//	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 15;
//	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
//	NVIC_InitStructure.NVIC_IRQChannelCmd = DECAIRQ_EXTI_USEIRQ;
//
//	NVIC_Init(&NVIC_InitStructure);
//
//	/* Enable the RTC Interrupt */
//	//NVIC_InitStructure.NVIC_IRQChannel = RTC_IRQn;
//	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 10;
//	//NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
//	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
//
//	//NVIC_Init(&NVIC_InitStructure);
//
//	return 0;
//}

/**
  * @brief  Checks whether the specified EXTI line is enabled or not.
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
//ITStatus EXTI_GetITEnStatus(uint32_t EXTI_Line)
//{
//  ITStatus bitstatus = RESET;
//  uint32_t enablestatus = 0;
//  /* Check the parameters */
//  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
//
//  enablestatus =  EXTI->IMR & EXTI_Line;
//  if (enablestatus != (uint32_t)RESET)
//  {
//    bitstatus = SET;
//  }
//  else
//  {
//    bitstatus = RESET;
//  }
//  return bitstatus;
//}
// ---------------------------------------------------------------------------
//
// NB: The purpose of this file is to provide for microprocessor interrupt enable/disable, this is used for
//     controlling mutual exclusion from critical sections in the code where interrupts and background
//     processing may interact.  The code using this is kept to a minimum and the disabling time is also
//     kept to a minimum, so blanket interrupt disable may be the easiest way to provide this.  But at a
//     minimum those interrupts coming from the decawave device should be disabled/re-enabled by this activity.
//
//     In porting this to a particular microprocessor, the implementer may choose to use #defines in the
//     deca_irq.h include file to map these calls transparently to the target system.  Alternatively the
//     appropriate code may be embedded in the functions provided below.
//
//     This mutex dependent on HW port.
//	   If HW port uses EXT_IRQ line to receive ready/busy status from DW1000 then mutex should use this signal
//     If HW port not use EXT_IRQ line (i.e. SW polling) then no necessary for decamutex(on/off)
//
//	   For critical section use this mutex instead
//	   __save_intstate()
//     __restore_intstate()
// ---------------------------------------------------------------------------


/*! ------------------------------------------------------------------------------------------------------------------
 * Function: decamutexon()
 *
 * Description: This function should disable interrupts. This is called at the start of a critical section
 * It returns the irq state before disable, this value is used to re-enable in decamutexoff call
 *
 * Note: The body of this function is defined in deca_mutex.c and is platform specific
 *
 * input parameters:
 *
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
	decaIrqStatus_t s = 0/*port_GetEXT_IRQStatus()*/;
//
//	if(s) {
//		port_DisableEXT_IRQ(); //disable the external interrupt line
//	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call

}

/*! ------------------------------------------------------------------------------------------------------------------
 * Function: decamutexoff()
 *
 * Description: This function should re-enable interrupts, or at least restore their state as returned(&saved) by decamutexon
 * This is called at the end of a critical section
 *
 * Note: The body of this function is defined in deca_mutex.c and is platform specific
 *
 * input parameters:
 * @param s - the state of the DW1000 interrupt as returned by decamutexon
 *
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
//		port_EnableEXT_IRQ();
	}
}
int RCC_Configuration(void)
{

	return 0;
}

/*! ------------------------------------------------------------------------------------------------------------------
 * @fn spi_set_rate_low()
 *
 * @brief Set SPI rate to less than 3 MHz to properly perform DW1000 initialisation.
 *
 * @param none
 *
 * @return none
 */
void spi_set_rate_low (void)
{
	SPIx->CR1 &= 0xFFC7;
	SPIx->CR1 |= (0x5 << 3);	//0x4-> /32 -> 100/32 = 3.125MHz
								//0x5-> /64 -> 100/64 = 1.5625MHz
}

/*! ------------------------------------------------------------------------------------------------------------------
 * @fn spi_set_rate_high()
 *
 * @brief Set SPI rate as close to 20 MHz as possible for optimum performances.
 *
 * @param none
 *
 * @return none
 */
void spi_set_rate_high (void)
{
	SPIx->CR1 &= 0xFFC7;
	SPIx->CR1 |= (0x4 << 3);	//0x4-> /32 -> 100/32 = 3.125MHz
}								//0x2-> /8  -> 100/8  = 12.5MHz


//int GPIO_Configuration(void)
//{
//	/* GPIO Ports Clock Enable */
//	__HAL_RCC_GPIOD_CLK_ENABLE();
//	__HAL_RCC_GPIOA_CLK_ENABLE();
//	__HAL_RCC_GPIOB_CLK_ENABLE();
//	GPIO_InitTypeDef GPIO_InitStructure;
//
//	/* Configure all unused GPIO port pins in Analog Input mode (floating input
//	* trigger OFF), this will reduce the power consumption and increase the device
//	* immunity against EMI/EMC */
//
//	// Enable GPIOs clocks
//	RCC_APB2PeriphClockCmd(
//						RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
//						RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD |
//						RCC_APB2Periph_GPIOE | RCC_APB2Periph_AFIO,
//						ENABLE);
//
//	// Set all GPIO pins as analog inputs
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
//	GPIO_Init(GPIOA, &GPIO_InitStructure);
//	GPIO_Init(GPIOB, &GPIO_InitStructure);
//	GPIO_Init(GPIOC, &GPIO_InitStructure);
//	GPIO_Init(GPIOD, &GPIO_InitStructure);
//	GPIO_Init(GPIOE, &GPIO_InitStructure);
//
//	//Enable GPIO used for User button
//	GPIO_InitStructure.GPIO_Pin = TA_BOOT1;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
//	GPIO_Init(TA_BOOT1_GPIO, &GPIO_InitStructure);
//
//	//Enable GPIO used for Response Delay setting
//	GPIO_InitStructure.GPIO_Pin = TA_RESP_DLY | TA_SW1_3 | TA_SW1_4 | TA_SW1_5 | TA_SW1_6 | TA_SW1_7 | TA_SW1_8;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
//	GPIO_Init(TA_RESP_DLY_GPIO, &GPIO_InitStructure);
//
//	//Enable GPIO used for SW1 switch setting
//	GPIO_InitStructure.GPIO_Pin = TA_SW1_3 | TA_SW1_4 | TA_SW1_5 | TA_SW1_6 | TA_SW1_7 | TA_SW1_8;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
//	GPIO_Init(TA_SW1_GPIO, &GPIO_InitStructure);
//
//	// Disable GPIOs clocks
//	//RCC_APB2PeriphClockCmd(
//	//					RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
//	//					RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD |
//	//					RCC_APB2Periph_GPIOE | RCC_APB2Periph_AFIO,
//	//					DISABLE);
//
//	// Enable GPIO used for LEDs
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_6 | GPIO_Pin_7;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
//	GPIO_Init(GPIOC, &GPIO_InitStructure);
//	GPIO_PinRemapConfig(GPIO_Remap_SPI1, DISABLE);
//
//    return 0;
//}


void reset_DW1000(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;

//    __HAL_RCC_GPIOA_CLK_ENABLE();
  //  __HAL_RCC_GPIOB_CLK_ENABLE();

    /*Configure GPIO pin : DWM_RST_Pin */
    GPIO_InitStruct.Pin = DW1000_RSTn;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(DW1000_RSTn_GPIO, &GPIO_InitStruct);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(DW1000_RSTn_GPIO, DW1000_RSTn, GPIO_PIN_RESET);

    GPIO_InitStruct.Pin = DW1000_RSTn;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(DW1000_RSTn_GPIO, &GPIO_InitStruct);

    HAL_Delay(2);
}


void setup_DW1000RSTnIRQ(int enable)
{
//	GPIO_InitTypeDef GPIO_InitStructure;
//	EXTI_InitTypeDef EXTI_InitStructure;
//	NVIC_InitTypeDef NVIC_InitStructure;
//
//	if(enable)
//	{
//		// Enable GPIO used as DECA IRQ for interrupt
//		GPIO_InitStructure.GPIO_Pin = DECARSTIRQ;
//		//GPIO_InitStructure.GPIO_Mode = 	GPIO_Mode_IPD;	//IRQ pin should be Pull Down to prevent unnecessary EXT IRQ while DW1000 goes to sleep mode
//		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
//		GPIO_Init(DECARSTIRQ_GPIO, &GPIO_InitStructure);
//
//		/* Connect EXTI Line to GPIO Pin */
//		GPIO_EXTILineConfig(DECARSTIRQ_EXTI_PORT, DECARSTIRQ_EXTI_PIN);
//
//		/* Configure EXTI line */
//		EXTI_InitStructure.EXTI_Line = DECARSTIRQ_EXTI;
//		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
//		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;	//MP IRQ polarity is high by default
//		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
//		EXTI_Init(&EXTI_InitStructure);
//
//		/* Set NVIC Grouping to 16 groups of interrupt without sub-grouping */
//		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
//
//		/* Enable and set EXTI Interrupt to the lowest priority */
//		NVIC_InitStructure.NVIC_IRQChannel = DECARSTIRQ_EXTI_IRQn;
//		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 15;
//		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
//		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
//
//		NVIC_Init(&NVIC_InitStructure);
//	}
//	else
//	{
//		//put the pin back to tri-state ... as input
//		GPIO_InitStructure.GPIO_Pin = DW1000_RSTn;
//		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
//		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
//		GPIO_Init(DW1000_RSTn_GPIO, &GPIO_InitStructure);
//
//		/* Configure EXTI line */
//		EXTI_InitStructure.EXTI_Line = DECARSTIRQ_EXTI;
//		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
//		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;	//MP IRQ polarity is high by default
//		EXTI_InitStructure.EXTI_LineCmd = DISABLE;
//		EXTI_Init(&EXTI_InitStructure);
//	}
}

/*! ------------------------------------------------------------------------------------------------------------------
 * @fn spi_peripheral_init()
 *
 * @brief Initialise all SPI peripherals at once.
 *
 * @param none
 *
 * @return none
 */
//static void spi_peripheral_init(void)
//{
//	GPIO_InitTypeDef GPIO_InitStruct;
//
//	hspi1.Instance = SPI1;
//	hspi1.Init.Mode = SPI_MODE_MASTER;
//	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
//	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
//	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
//	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
//	hspi1.Init.NSS = SPI_NSS_SOFT;
//	hspi1.Init.BaudRatePrescaler = SPIx_PRESCALER;
//	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
//	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
//	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
//	hspi1.Init.CRCPolynomial = 10;
//	if (HAL_SPI_Init(&hspi1) != HAL_OK)
//	{
//	//		Error_Handler();
//	}
//
//	/*Configure GPIO pin : SPI1_CS_Pin */
//	__HAL_RCC_GPIOB_CLK_ENABLE();
//
//	GPIO_InitStruct.Pin = SPIx_CS;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(SPIx_CS_GPIO, &GPIO_InitStruct);
//
//	/*Configure GPIO pin Output Level */
//	HAL_GPIO_WritePin(SPIx_CS_GPIO, SPIx_CS, GPIO_PIN_SET);
//}

/*! ------------------------------------------------------------------------------------------------------------------
 * @fn peripherals_init()
 *
 * @brief Initialise all peripherals.
 *
 * @param none
 *
 * @return none
 */
void peripherals_init (void)
{
	HAL_Init();



	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/**Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 100;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 3;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
//	_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
	|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
	{
//	_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
	{
//	_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);



//	gpio_init();
	GPIO_InitTypeDef GPIO_InitStruct;
	/* GPIO Ports Clock Enable */
//	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pins : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin */
	GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);


//	interrupt_init();

//	spi_peripheral_init();


	hspi2.Instance = SPI2;
	hspi2.Init.Mode = SPI_MODE_MASTER;
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
	hspi2.Init.NSS = SPI_NSS_SOFT;
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
	hspi2.Init.CRCPolynomial = 10;
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
	{
	//	    _Error_Handler(__FILE__, __LINE__);
	}

	/*Configure GPIO pin : SPI1_CS_Pin */
//	__HAL_RCC_GPIOB_CLK_ENABLE();

	GPIO_InitStruct.Pin = DW_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET);


	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK)
	{
//		_Error_Handler(__FILE__, __LINE__);
	}
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

	GPIO_InitTypeDef GPIO_InitStruct;
	if(hspi->Instance==SPI2)
	{
		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();

		/**SPI2 GPIO Configuration
		PB13     ------> SPI2_SCK
		PB14     ------> SPI2_MISO
		PB15     ------> SPI2_MOSI
		*/
		GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
}

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
  {
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin);
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	if(huart->Instance==USART2)
	{
	    __HAL_RCC_USART2_CLK_ENABLE();

	    /**USART2 GPIO Configuration
	    PA2     ------> USART2_TX
	    PA3     ------> USART2_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	}
}

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
  {
    /* Peripheral clock disable */
	__HAL_RCC_USART2_CLK_DISABLE();

	/**USART2 GPIO Configuration
	PA2     ------> USART2_TX
	PA3     ------> USART2_RX
	*/
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);

  }
}
