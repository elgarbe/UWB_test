
#ifndef __NOKIA_LCD_H
#define __NOKIA_LCD_H

#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_rcc.h"
#include "stm32f4xx_hal_gpio.h"
#include "stm32f4xx_hal_spi.h"
#include <stdlib.h>
#include "string.h"

extern SPI_HandleTypeDef hspi1;

#define LCD_CS_Pin GPIO_PIN_4
#define LCD_CS_GPIO_Port GPIOA
#define LCD_SCK_Pin GPIO_PIN_5
#define LCD_SCK_GPIO_Port GPIOA
#define LCD_CD_Pin GPIO_PIN_6
#define LCD_CD_GPIO_Port GPIOA
#define LCD_MOSI_Pin GPIO_PIN_7
#define LCD_MOSI_GPIO_Port GPIOA
#define LCD_RST_Pin GPIO_PIN_4
#define LCD_RST_GPIO_Port GPIOC

void SetPixel(int16_t x, int16_t y);
void ClearPixel(int16_t x, int16_t y);
void DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1);
void FillRect(int16_t x, int16_t y, int16_t w, int16_t h);
void DisplayTime(uint32_t number);
void PCD8544SetContrast(uint8_t val);
void ClearDisplayBuffer(void);
void PCD8544Init(void);
void BigNumber(uint32_t number);

void PCD8544Update();
void Start_Gpio(void);

/**
 * Public enums
 */
/**
 * Used for pixel "color"
 * LCD is 2 bit, so pixel can be just set or clear
 */
typedef enum {
	PCD8544_Pixel_Clear = 0,
	PCD8544_Pixel_Set = !PCD8544_Pixel_Clear
} PCD8544_Pixel_t;

/**
 * Font size for text
 * There are 2 sizes included
 */
typedef enum {
	PCD8544_FontSize_5x7 = 0,
	PCD8544_FontSize_3x5 = !PCD8544_FontSize_5x7
} PCD8544_FontSize_t;

/**
 * Used to invert pixels
 */
typedef enum {
	PCD8544_Invert_Yes,
	PCD8544_Invert_No
} PCD8544_Invert_t;

#define PCD8544_WIDTH				84
#define PCD8544_HEIGHT				48

#define PCD8544_CHAR5x7_WIDTH		6 //5*8
#define PCD8544_CHAR5x7_HEIGHT		8
#define PCD8544_CHAR3x5_WIDTH		4 //3*5
#define PCD8544_CHAR3x5_HEIGHT		6

#define PCD8544_BUFFER_SIZE 		PCD8544_WIDTH * PCD8544_HEIGHT / 8

#endif /* __NOKIA_LCD_H */
